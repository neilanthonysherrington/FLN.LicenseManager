@inject ILicenseUIService LicenseUIService

<button class="btn btn-primary primary-button my-5">Generate License</button>

@if (LicenseUIService.Licenses == null)
{
    <div>Fetching Licenses...</div>
}
else
{
    <table class=" table table-bordered">
        <thead>
            <tr>
                <th scope="col">Customer</th>
                <th scope="col">Application</th>
                <th scope="col">Status</th>
                <th scope="col">License Key</th>
                <th scope="col">Further Details</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <div class="input-group input-group-sm">
                        <input 
                                type="text" 
                                class="form-control" 
                                placeholder="Filter by customer"
                                @bind-value="customerFilterText"
                                @bind-value:event="onchange"
                        >
                        <button class="btn btn-outline-secondary" type="button" @onclick="@(x => FilterBy("customer"))">
                            <i class="oi oi-magnifying-glass"></i>
                        </button>
                        <button class="btn btn-outline-secondary" type="button" @onclick="@(x => ClearFilter("customer"))">
                            <i class="oi oi-circle-x"></i>
                        </button>
                    </div>
                </td>
                <td>
                    <div class="input-group input-group-sm">
                        <input  type="text"
                                class="form-control"
                                placeholder="Filter by application"
                                @bind-value="applicationFilterText"
                                @bind-value:event="onchange" 
                        >
                        <button class="btn btn-outline-secondary" type="button" @onclick="@(x => FilterBy("application"))">
                            <i class="oi oi-magnifying-glass"></i>
                        </button>
                        <button class="btn btn-outline-secondary" type="button" @onclick="@(x => ClearFilter("application"))">
                            <i class="oi oi-circle-x"></i>
                        </button>
                    </div>
                </td>
                <td>
                    <div class="input-group input-group-sm">
                        <input  type="text"
                                class="form-control"
                                placeholder="Filter by status"
                                @bind-value="statusFilterText"
                                @bind-value:event="onchange"
                        >
                        <button class="btn btn-outline-secondary" type="button" @onclick="@(x => FilterBy("status"))">
                            <i class="oi oi-magnifying-glass"></i>
                        </button>
                        <button class="btn btn-outline-secondary" type="button" @onclick="@(x => ClearFilter("status"))">
                            <i class="oi oi-circle-x"></i>
                        </button>
                    </div>
                </td>
                <td>
                    <div class="input-group input-group-sm">
                        <input  type="text"
                                class="form-control"
                                placeholder="Filter by key"
                                @bind-value="keyFilterText"
                                @bind-value:event="onchange"
                        >
                        <button class="btn btn-outline-secondary" type="button" @onclick="@(x => FilterBy("key"))">
                            <i class="oi oi-magnifying-glass"></i>
                        </button>
                        <button class="btn btn-outline-secondary" type="button" @onclick="@(x => ClearFilter("key"))">
                            <i class="oi oi-circle-x"></i>
                        </button>
                    </div>
                </td>
                <td></td>
            </tr>
            @foreach (var license in LicenseUIService.Licenses)
            {
                <tr>
                    <td>@license.Customer</td>
                    <td>@license.Application</td>
                    <td>@license.Status</td>
                    <td>@license.LicenseKey</td>
                    <td><button class="btn btn-info secondary-button">Details</button></td>
                </tr>
            }
        </tbody>
    </table>
}




@code {
    protected override async Task OnInitializedAsync()
    {
        await LicenseUIService.GetLicenses();
    }

    private string customerFilterText = string.Empty;
    private string applicationFilterText = string.Empty;
    private string statusFilterText = string.Empty;
    private string keyFilterText = string.Empty;

    private void FilterBy(string column)
    {
        var filterText = string.Empty;
        switch (column)
        {
            case "customer" :
                filterText = customerFilterText;
                break;
            case "application" :
                filterText = applicationFilterText;
                break;
        }

        var filter = LicenseUIService.Licenses.Where(l => l.Customer.ToLower().Contains(filterText.ToLower())).ToList();
        LicenseUIService.Licenses = filter;
    }

    private async Task ClearFilter(string column)
    {
        customerFilterText = string.Empty;


        // TODO change below to remove specific filter only
        await LicenseUIService.GetLicenses();
        
    }
}
